using System;

namespace Intel8080Emulator
{
	public class InstructionSet
	{



		//Getting the instruction required can be done in multiple ways:
		//Switch-case: easy to implement but can be slower due to the code generated by the compiler
		//Jump table using an array of functions: can be faster but could suffer from procedure call overhead
		//Labels and "goto"-directives in languages that permit them: this can hurt optimazations performed by the compiler

		//The basic structure of the functionality of an instruction is:
		//Get input data -> operate with the data -> store the result somewhere -> update PC and timing.
		//Some instructions implement all of those steps, some others only a few of them.

		//Understanding instructions:
		//I.e.: 0x8D Intel i8080
		//		ADC L	<- name of the instruction
		//		1	4	<- 1: ; 4: update time with 4 (or whatever number stands in this position)
		//		SZAPC	<- The flags that must be raised when executing this instruction
		internal void getInstruction(int opcode)
		{
			switch(opcode)
			{
			case 0x00:
				return null;

			}
		}
	}
}

